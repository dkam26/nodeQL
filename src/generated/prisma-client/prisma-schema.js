module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateItems {
  count: Int!
}

type AggregateShoppinglist {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Items {
  id: ID!
  name: String!
  price: Int!
  ShoppinglistOwner: Shoppinglist
}

type ItemsConnection {
  pageInfo: PageInfo!
  edges: [ItemsEdge]!
  aggregate: AggregateItems!
}

input ItemsCreateInput {
  id: ID
  name: String!
  price: Int!
  ShoppinglistOwner: ShoppinglistCreateOneWithoutListsInput
}

input ItemsCreateManyWithoutShoppinglistOwnerInput {
  create: [ItemsCreateWithoutShoppinglistOwnerInput!]
  connect: [ItemsWhereUniqueInput!]
}

input ItemsCreateWithoutShoppinglistOwnerInput {
  id: ID
  name: String!
  price: Int!
}

type ItemsEdge {
  node: Items!
  cursor: String!
}

enum ItemsOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
}

type ItemsPreviousValues {
  id: ID!
  name: String!
  price: Int!
}

input ItemsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  AND: [ItemsScalarWhereInput!]
  OR: [ItemsScalarWhereInput!]
  NOT: [ItemsScalarWhereInput!]
}

type ItemsSubscriptionPayload {
  mutation: MutationType!
  node: Items
  updatedFields: [String!]
  previousValues: ItemsPreviousValues
}

input ItemsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ItemsWhereInput
  AND: [ItemsSubscriptionWhereInput!]
  OR: [ItemsSubscriptionWhereInput!]
  NOT: [ItemsSubscriptionWhereInput!]
}

input ItemsUpdateInput {
  name: String
  price: Int
  ShoppinglistOwner: ShoppinglistUpdateOneWithoutListsInput
}

input ItemsUpdateManyDataInput {
  name: String
  price: Int
}

input ItemsUpdateManyMutationInput {
  name: String
  price: Int
}

input ItemsUpdateManyWithoutShoppinglistOwnerInput {
  create: [ItemsCreateWithoutShoppinglistOwnerInput!]
  delete: [ItemsWhereUniqueInput!]
  connect: [ItemsWhereUniqueInput!]
  set: [ItemsWhereUniqueInput!]
  disconnect: [ItemsWhereUniqueInput!]
  update: [ItemsUpdateWithWhereUniqueWithoutShoppinglistOwnerInput!]
  upsert: [ItemsUpsertWithWhereUniqueWithoutShoppinglistOwnerInput!]
  deleteMany: [ItemsScalarWhereInput!]
  updateMany: [ItemsUpdateManyWithWhereNestedInput!]
}

input ItemsUpdateManyWithWhereNestedInput {
  where: ItemsScalarWhereInput!
  data: ItemsUpdateManyDataInput!
}

input ItemsUpdateWithoutShoppinglistOwnerDataInput {
  name: String
  price: Int
}

input ItemsUpdateWithWhereUniqueWithoutShoppinglistOwnerInput {
  where: ItemsWhereUniqueInput!
  data: ItemsUpdateWithoutShoppinglistOwnerDataInput!
}

input ItemsUpsertWithWhereUniqueWithoutShoppinglistOwnerInput {
  where: ItemsWhereUniqueInput!
  update: ItemsUpdateWithoutShoppinglistOwnerDataInput!
  create: ItemsCreateWithoutShoppinglistOwnerInput!
}

input ItemsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  ShoppinglistOwner: ShoppinglistWhereInput
  AND: [ItemsWhereInput!]
  OR: [ItemsWhereInput!]
  NOT: [ItemsWhereInput!]
}

input ItemsWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createItems(data: ItemsCreateInput!): Items!
  updateItems(data: ItemsUpdateInput!, where: ItemsWhereUniqueInput!): Items
  updateManyItemses(data: ItemsUpdateManyMutationInput!, where: ItemsWhereInput): BatchPayload!
  upsertItems(where: ItemsWhereUniqueInput!, create: ItemsCreateInput!, update: ItemsUpdateInput!): Items!
  deleteItems(where: ItemsWhereUniqueInput!): Items
  deleteManyItemses(where: ItemsWhereInput): BatchPayload!
  createShoppinglist(data: ShoppinglistCreateInput!): Shoppinglist!
  updateShoppinglist(data: ShoppinglistUpdateInput!, where: ShoppinglistWhereUniqueInput!): Shoppinglist
  updateManyShoppinglists(data: ShoppinglistUpdateManyMutationInput!, where: ShoppinglistWhereInput): BatchPayload!
  upsertShoppinglist(where: ShoppinglistWhereUniqueInput!, create: ShoppinglistCreateInput!, update: ShoppinglistUpdateInput!): Shoppinglist!
  deleteShoppinglist(where: ShoppinglistWhereUniqueInput!): Shoppinglist
  deleteManyShoppinglists(where: ShoppinglistWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  items(where: ItemsWhereUniqueInput!): Items
  itemses(where: ItemsWhereInput, orderBy: ItemsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Items]!
  itemsesConnection(where: ItemsWhereInput, orderBy: ItemsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemsConnection!
  shoppinglist(where: ShoppinglistWhereUniqueInput!): Shoppinglist
  shoppinglists(where: ShoppinglistWhereInput, orderBy: ShoppinglistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shoppinglist]!
  shoppinglistsConnection(where: ShoppinglistWhereInput, orderBy: ShoppinglistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoppinglistConnection!
  node(id: ID!): Node
}

type Shoppinglist {
  id: ID!
  name: String!
  lists(where: ItemsWhereInput, orderBy: ItemsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Items!]
}

type ShoppinglistConnection {
  pageInfo: PageInfo!
  edges: [ShoppinglistEdge]!
  aggregate: AggregateShoppinglist!
}

input ShoppinglistCreateInput {
  id: ID
  name: String!
  lists: ItemsCreateManyWithoutShoppinglistOwnerInput
}

input ShoppinglistCreateOneWithoutListsInput {
  create: ShoppinglistCreateWithoutListsInput
  connect: ShoppinglistWhereUniqueInput
}

input ShoppinglistCreateWithoutListsInput {
  id: ID
  name: String!
}

type ShoppinglistEdge {
  node: Shoppinglist!
  cursor: String!
}

enum ShoppinglistOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ShoppinglistPreviousValues {
  id: ID!
  name: String!
}

type ShoppinglistSubscriptionPayload {
  mutation: MutationType!
  node: Shoppinglist
  updatedFields: [String!]
  previousValues: ShoppinglistPreviousValues
}

input ShoppinglistSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShoppinglistWhereInput
  AND: [ShoppinglistSubscriptionWhereInput!]
  OR: [ShoppinglistSubscriptionWhereInput!]
  NOT: [ShoppinglistSubscriptionWhereInput!]
}

input ShoppinglistUpdateInput {
  name: String
  lists: ItemsUpdateManyWithoutShoppinglistOwnerInput
}

input ShoppinglistUpdateManyMutationInput {
  name: String
}

input ShoppinglistUpdateOneWithoutListsInput {
  create: ShoppinglistCreateWithoutListsInput
  update: ShoppinglistUpdateWithoutListsDataInput
  upsert: ShoppinglistUpsertWithoutListsInput
  delete: Boolean
  disconnect: Boolean
  connect: ShoppinglistWhereUniqueInput
}

input ShoppinglistUpdateWithoutListsDataInput {
  name: String
}

input ShoppinglistUpsertWithoutListsInput {
  update: ShoppinglistUpdateWithoutListsDataInput!
  create: ShoppinglistCreateWithoutListsInput!
}

input ShoppinglistWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  lists_every: ItemsWhereInput
  lists_some: ItemsWhereInput
  lists_none: ItemsWhereInput
  AND: [ShoppinglistWhereInput!]
  OR: [ShoppinglistWhereInput!]
  NOT: [ShoppinglistWhereInput!]
}

input ShoppinglistWhereUniqueInput {
  id: ID
}

type Subscription {
  items(where: ItemsSubscriptionWhereInput): ItemsSubscriptionPayload
  shoppinglist(where: ShoppinglistSubscriptionWhereInput): ShoppinglistSubscriptionPayload
}
`
      }
    